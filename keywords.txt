# keywords for syntax highlighting of eModbus library

# KEYWORD1: data types
ModbusMessage	KEYWORD1
ModbusError	KEYWORD1
MBOnData	KEYWORD1
MBOnError	KEYWORD1
Error	KEYWORD1
FunctionCode	KEYWORD1

# KEYWORD2: functions
# Logging.h
LOG_N	KEYWORD2
LOG_C	KEYWORD2
LOG_E	KEYWORD2
LOG_W	KEYWORD2
LOG_I	KEYWORD2
LOG_D	KEYWORD2
LOG_V	KEYWORD2
LOGRAW_N	KEYWORD2
LOGRAW_C	KEYWORD2
LOGRAW_E	KEYWORD2
LOGRAW_W	KEYWORD2
LOGRAW_I	KEYWORD2
LOGRAW_D	KEYWORD2
LOGRAW_V	KEYWORD2
HEXDUMP_N	KEYWORD2
HEXDUMP_C	KEYWORD2
HEXDUMP_E	KEYWORD2
HEXDUMP_W	KEYWORD2
HEXDUMP_I	KEYWORD2
HEXDUMP_D	KEYWORD2
HEXDUMP_V	KEYWORD2

# ModbusBridge
attachServer	KEYWORD2
addFunctionCode	KEYWORD2
denyFunctionCode	KEYWORD2

# ModbusClient
onDataHandler	KEYWORD2
onErrorHandler	KEYWORD2
getMessageCount	KEYWORD2
addRequest	KEYWORD2
begin	KEYWORD2
setTimeout	KEYWORD2
setTarget	KEYWORD2

# ModbusClientTCPasync
connect	KEYWORD2
disconnect	KEYWORD2
setIdleTimeout	KEYWORD2
setMaxInflightRequests	KEYWORD2

# ModbusMessage
addValue	KEYWORD2
getValue	KEYWORD2
add	KEYWORD2
get	KEYWORD2
append	KEYWORD2
setMessage	KEYWORD2
setError	KEYWORD2
getServerID	KEYWORD2
getFunctionCode	KEYWORD2
getError	KEYWORD2
setServerID	KEYWORD2
setFunctionCode	KEYWORD2
push_back	KEYWORD2
clear	KEYWORD2
size	KEYWORD2
resize	KEYWORD2
data	KEYWORD2

# ModbusServer
registerWorker	KEYWORD2
getWorker	KEYWORD2
isServerFor	KEYWORD2
localRequest	KEYWORD2
listServer	KEYWORD2
start	KEYWORD2
stop	KEYWORD2
activeClients	KEYWORD2

# RTUutils
calcCRC	KEYWORD2
validCRC	KEYWORD2
addCRC	KEYWORD2

# KEYWORD3: Classes
ModbusClientTCP	KEYWORD3
ModbusClientTCPasync	KEYWORD3
ModbusClientRTU	KEYWORD3
ModbusServerEthernet	KEYWORD3
ModbusServerWiFi	KEYWORD3
ModbusServerTCPasync	KEYWORD3
ModbusServerRTU	KEYWORD3
ModbusBridgeEthernet	KEYWORD3
ModbusBridgeWiFi	KEYWORD3
ModbusBridgeRTU	KEYWORD3
RTUutils	KEYWORD3

# LITERAL1: Constants
# Logging.h
LOG_LEVEL	LITERAL1
LOCAL_LOG_LEVEL	LITERAL1
LOG_LEVEL_NONE	LITERAL1
LOG_LEVEL_CRITICAL	LITERAL1
LOG_LEVEL_ERROR	LITERAL1
LOG_LEVEL_WARNING	LITERAL1
LOG_LEVEL_INFO	LITERAL1
LOG_LEVEL_DEBUG	LITERAL1
LOG_LEVEL_VERBOSE	LITERAL1
LOGDEVICE	LITERAL1
LL_RED	LITERAL1
LL_GREEN	LITERAL1
LL_YELLOW	LITERAL1
LL_BLUE	LITERAL1
LL_MAGENTA	LITERAL1
LL_CYAN	LITERAL1
LL_NORM	LITERAL1

# ModbusServer
NIL_RESPONSE	LITERAL1
ECHO_RESPONSE	LITERAL1

DEFAULTTIMEOUT	LITERAL1
TARGETHOSTINTERVAL	LITERAL1

# Modbus function codes
READ_COIL	LITERAL1
READ_DISCR_INPUT	LITERAL1
READ_HOLD_REGISTER	LITERAL1
READ_INPUT_REGISTER	LITERAL1
WRITE_COIL	LITERAL1
WRITE_HOLD_REGISTER	LITERAL1
READ_EXCEPTION_SERIAL	LITERAL1
DIAGNOSTICS_SERIAL	LITERAL1
READ_COMM_CNT_SERIAL	LITERAL1
READ_COMM_LOG_SERIAL	LITERAL1
WRITE_MULT_COILS	LITERAL1
WRITE_MULT_REGISTERS	LITERAL1
REPORT_SERVER_ID_SERIAL	LITERAL1
READ_FILE_RECORD	LITERAL1
WRITE_FILE_RECORD	LITERAL1
MASK_WRITE_REGISTER	LITERAL1
R_W_MULT_REGISTERS	LITERAL1
READ_FIFO_QUEUE	LITERAL1
ENCAPSULATED_INTERFACE	LITERAL1
USER_DEFINED_41	LITERAL1
USER_DEFINED_42	LITERAL1
USER_DEFINED_43	LITERAL1
USER_DEFINED_44	LITERAL1
USER_DEFINED_45	LITERAL1
USER_DEFINED_46	LITERAL1
USER_DEFINED_47	LITERAL1
USER_DEFINED_48	LITERAL1
USER_DEFINED_64	LITERAL1
USER_DEFINED_65	LITERAL1
USER_DEFINED_66	LITERAL1
USER_DEFINED_67	LITERAL1
USER_DEFINED_68	LITERAL1
USER_DEFINED_69	LITERAL1
USER_DEFINED_6A	LITERAL1
USER_DEFINED_6B	LITERAL1
USER_DEFINED_6C	LITERAL1
USER_DEFINED_6D	LITERAL1
USER_DEFINED_6E	LITERAL1

# Modbus error codes
SUCCESS	LITERAL1
ILLEGAL_FUNCTION	LITERAL1
ILLEGAL_DATA_ADDRESS	LITERAL1
ILLEGAL_DATA_VALUE	LITERAL1
SERVER_DEVICE_FAILURE	LITERAL1
ACKNOWLEDGE	LITERAL1
SERVER_DEVICE_BUSY	LITERAL1
NEGATIVE_ACKNOWLEDGE	LITERAL1
MEMORY_PARITY_ERROR	LITERAL1
GATEWAY_PATH_UNAVAIL	LITERAL1
GATEWAY_TARGET_NO_RESP	LITERAL1
TIMEOUT	LITERAL1
INVALID_SERVER	LITERAL1
CRC_ERROR	LITERAL1
FC_MISMATCH	LITERAL1
SERVER_ID_MISMATCH	LITERAL1
PACKET_LENGTH_ERROR	LITERAL1
PARAMETER_COUNT_ERROR	LITERAL1
PARAMETER_LIMIT_ERROR	LITERAL1
REQUEST_QUEUE_FULL	LITERAL1
ILLEGAL_IP_OR_PORT	LITERAL1
IP_CONNECTION_FAILED	LITERAL1
TCP_HEAD_MISMATCH	LITERAL1
UNDEFINED_ERROR	LITERAL1
Class ================================== 
CoilData	KEYWORD1
operator=	KEYWORD2
operator==	KEYWORD2
operator!=	KEYWORD2
operatorvector<uint8_t>const	KEYWORD2
slice	KEYWORD2
operator[]	KEYWORD2
init	KEYWORD2
coils	KEYWORD2
empty	KEYWORD2
operatorbool	KEYWORD2
coilsSetON	KEYWORD2
coilsSetOFF	KEYWORD2
print	KEYWORD2
